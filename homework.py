import os
from dotenv import load_dotenv
import time
import logging
from telebot import TeleBot
import requests


logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - [%(levelname)s] - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)

load_dotenv()

PRACTICUM_TOKEN = os.getenv('PRACTICUM_TOKEN')
TELEGRAM_TOKEN = os.getenv('TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

RETRY_PERIOD = 600
ENDPOINT = 'https://practicum.yandex.ru/api/user_api/homework_statuses/'
HEADERS = {'Authorization': f'OAuth {PRACTICUM_TOKEN}'}


HOMEWORK_VERDICTS = {
    'approved': '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —Ä–µ–≤—å—é–µ—Ä—É –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –£—Ä–∞!',
    'reviewing': '–†–∞–±–æ—Ç–∞ –≤–∑—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–≤—å—é–µ—Ä–æ–º.',
    'rejected': '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —É —Ä–µ–≤—å—é–µ—Ä–∞ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è.'
}


def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    required_tokens = {
        'PRACTICUM_TOKEN': PRACTICUM_TOKEN,
        'TELEGRAM_TOKEN': TELEGRAM_TOKEN,
        'TELEGRAM_CHAT_ID': TELEGRAM_CHAT_ID
    }

    missing_tokens = [
        name for name, value in required_tokens.items() if not value]

    if missing_tokens:
        text = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
        logging.critical(
            f"{text} {', '.join(missing_tokens)}")
        return False
    return True


def send_message(bot, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        bot.send_message(TELEGRAM_CHAT_ID, message)
        logging.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False


def get_api_answer(bot, timestamp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ API."""
    params = {"from_date": timestamp}
    try:
        response = requests.get(ENDPOINT, headers=HEADERS, params=params)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        logging.debug("‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return response.json()
    except requests.RequestException as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}"
        logging.error(error_message)
        send_message(bot, error_message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        return None


def check_response(response):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ API."""
    if not response:
        logging.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API")
        return None

    if 'homeworks' not in response:
        logging.error("‚ùå –í –æ—Ç–≤–µ—Ç–µ API –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'homeworks'")
        return None

    homeworks = response.get('homeworks')
    if not homeworks:
        logging.debug("üîç –í –æ—Ç–≤–µ—Ç–µ API –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤")
    return homeworks


def parse_status(bot, homework):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞."""
    status = homework.get('status')
    if homework.get('status') not in HOMEWORK_VERDICTS:
        error_message = f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã: {status}'
        logging.error(error_message)
        send_message(bot, error_message)
        raise ValueError(
            f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {homework.get("status")}'
        )
    homework_name = homework.get('homework_name')
    verdict = HOMEWORK_VERDICTS.get(status)
    message = f'–ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã "{homework_name}". {verdict}'
    logging.debug(
        f'üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status} –¥–ª—è —Ä–∞–±–æ—Ç—ã "{homework_name}"')
    return message


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    bot = TeleBot(TELEGRAM_TOKEN)
    timestamp = int(time.time())
    last_verdict = None

    while True:
        try:
            response = get_api_answer(bot, timestamp)
            homeworks = check_response(response)

            if homeworks:
                first_homework = homeworks[0]
                verdict = parse_status(bot, first_homework)
            else:
                verdict = '–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤.'

            if verdict != last_verdict:  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                if send_message(bot, verdict):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    last_verdict = verdict  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å

            logging.debug(f"üîç –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—É—Å–µ: {verdict}")

            timestamp = response.get('current_date', timestamp)

        except Exception as error:
            message = f'–°–±–æ–π –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {error}'
            logging.error(message)
            send_message(bot, message)
            print(message)
            if last_verdict != message:
                send_message(bot, message)
                last_verdict = message

        finally:
            time.sleep(RETRY_PERIOD)


if __name__ == '__main__':
    if not check_tokens():
        exit(
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    main()
