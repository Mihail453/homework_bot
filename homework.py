import os
from dotenv import load_dotenv
import time
import logging
from telebot import TeleBot
import requests
from http import HTTPStatus


logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - [%(levelname)s] - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)

load_dotenv()

PRACTICUM_TOKEN = os.getenv('PRACTICUM_TOKEN')
TELEGRAM_TOKEN = os.getenv('TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')


RETRY_PERIOD = 600
ENDPOINT = 'https://practicum.yandex.ru/api/user_api/homework_statuses/'
HEADERS = {'Authorization': f'OAuth {PRACTICUM_TOKEN}'}


HOMEWORK_VERDICTS = {
    'approved': '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —Ä–µ–≤—å—é–µ—Ä—É –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –£—Ä–∞!',
    'reviewing': '–†–∞–±–æ—Ç–∞ –≤–∑—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–≤—å—é–µ—Ä–æ–º.',
    'rejected': '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —É —Ä–µ–≤—å—é–µ—Ä–∞ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è.'
}


def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    tokens = {
        'PRACTICUM_TOKEN': PRACTICUM_TOKEN,
        'TELEGRAM_TOKEN': TELEGRAM_TOKEN,
        'TELEGRAM_CHAT_ID': TELEGRAM_CHAT_ID,
    }
    all_tokens = True
    for name, token in tokens.items():
        if token:
            logging.debug(
                f'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} = {token} –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.'
            )
        else:
            logging.critical(
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '
                f'{name} = {token}.'
            )
            all_tokens = False
    if not all_tokens:
        raise SystemExit(
            '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è '
            '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
        )


def send_message(bot, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–º—Å –≤ —Ç–≥."""
    try:
        bot.send_message(TELEGRAM_CHAT_ID, message)
        logging.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
        return True
    except Exception as e:
        text = (f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        logging.error(text)
        send_message(bot, text)
        return False


def get_api_answer(timestamp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ API."""
    params = {"from_date": timestamp}
    try:
        response = requests.get(ENDPOINT, headers=HEADERS, params=params)
    except requests.RequestException:
        raise ConnectionError('–°–±–æ–π —Ä–∞–±–æ—Ç—ã')
    if response.status_code != HTTPStatus.OK:
        raise requests.HTTPError(
            '–û—à–∏–±–∫–∞ HTTP: {status_code}. –ü—Ä–∏—á–∏–Ω–∞: {reason}. '
            '–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {text}.'.format(**response)
        )
    logging.debug('–ó–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É API-—Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ.')
    return response.json()


def check_response(response):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ API."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    if not response:
        logging.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API")
        raise TypeError("–û—Ç–≤–µ—Ç API –ø—É—Å—Ç–æ–π. –û–∂–∏–¥–∞–ª—Å—è –Ω–µ–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
    if not isinstance(response, dict):
        text = '‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–µ–º—ã–π —Å–ª–æ–≤–∞—Ä—å, –∞ –ø–æ–ª—É—á–µ–Ω —Ç–∏–ø'
        raise TypeError(f"{text} {type(response)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'homeworks'
    if 'homeworks' not in response:
        raise TypeError("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'homeworks' –≤ –æ—Ç–≤–µ—Ç–µ API.")

    homeworks = response.get('homeworks')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ 'homeworks' —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
    if not isinstance(homeworks, list):
        raise TypeError(f"‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø {type(homeworks)}")

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    if not homeworks:
        logging.debug("üîç –í –æ—Ç–≤–µ—Ç–µ API –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤")
    return homeworks


def parse_status(homework):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞."""
    homework_name = homework.get('homework_name')
    if not homework_name:
        text = "‚ùå –û—à–∏–±–∫–∞: –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'homework_name'. –î–∞–Ω–Ω—ã–µ:"
        raise KeyError(f"{text} {homework}")

    status = homework.get('status')
    if homework.get('status') not in HOMEWORK_VERDICTS:
        error_message = f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã: {status}'
        logging.error(error_message)
        raise KeyError(f'{error_message}')

    homework_name = homework.get('homework_name')
    verdict = HOMEWORK_VERDICTS.get(status)
    message = f'–ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã "{homework_name}". {verdict}'
    logging.debug(
        f'üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status} –¥–ª—è —Ä–∞–±–æ—Ç—ã "{homework_name}"')
    return message


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    check_tokens()
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞
    bot = TeleBot(TELEGRAM_TOKEN)
    timestamp = int(time.time())
    last_verdict = None

    while True:
        try:
            response = get_api_answer(timestamp)
            homeworks = check_response(response)

            if homeworks:
                first_homework = homeworks[0]
                verdict = parse_status(first_homework)
            else:
                verdict = '–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤.'

            if verdict != last_verdict:  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                if send_message(bot, verdict):
                    last_verdict = verdict  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            elif verdict == '–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤.':
                send_message(bot, verdict)

            timestamp = response.get('current_date', timestamp)

        except Exception as error:
            message = f'–°–±–æ–π –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {error}'
            logging.error(message)
            send_message(bot, message)
            if last_verdict != message:
                send_message(bot, message)
                last_verdict = message

        finally:
            time.sleep(RETRY_PERIOD)


if __name__ == '__main__':
    main()
